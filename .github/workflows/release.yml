name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_suffix: .exe
            asset_name: clipboard-monitor-windows-amd64.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_suffix: ""
            asset_name: clipboard-monitor-macos-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_suffix: ""
            asset_name: clipboard-monitor-macos-arm64
          - os: ubuntu-22.04
            goos: linux
            goarch: amd64
            binary_suffix: ""
            asset_name: clipboard-monitor-linux-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update

        # Ubuntu 22.04 使用 libwebkit2gtk-4.1-dev
        echo "Installing dependencies for Ubuntu 22.04..."
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libgl1-mesa-dev \
          libxi-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxxf86vm-dev

        # 验证关键依赖
        echo "Verifying dependencies..."
        pkg-config --exists gtk+-3.0 && echo "✓ GTK3: OK" || echo "✗ GTK3: Missing"
        pkg-config --exists webkit2gtk-4.1 && echo "✓ WebKit2GTK-4.1: OK" || echo "✗ WebKit2GTK-4.1: Missing"

        # 显示 pkg-config 路径
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        echo "Available .pc files:"
        find /usr/lib/pkgconfig /usr/share/pkgconfig -name "*webkit*" 2>/dev/null || echo "No webkit .pc files found"

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # macOS dependencies for webview
        echo "Checking macOS dependencies..."
        # 确保 Xcode 命令行工具已安装
        xcode-select --install 2>/dev/null || echo "Xcode command line tools already installed"
        # 检查必要的框架
        echo "WebKit framework: $(find /System/Library/Frameworks -name "WebKit.framework" 2>/dev/null || echo "Not found")"

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Windows dependencies for webview
        echo "Installing Windows dependencies..."
        # 确保有 C++ 构建工具
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools" -y || echo "Build tools already installed"

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Setup Go proxy and clean cache
      run: |
        go env -w GOPROXY=https://proxy.golang.org,direct
        go env -w GOSUMDB=sum.golang.org
        go clean -modcache

    - name: Download dependencies
      run: |
        go mod tidy
        go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      shell: bash
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

        # 显示构建环境信息
        echo "Go version: $(go version)"
        echo "CGO_ENABLED: $CGO_ENABLED"
        echo "GOOS: $GOOS"
        echo "GOARCH: $GOARCH"

        # 检查依赖
        echo "Checking dependencies..."
        go mod verify

        # 构建
        echo "Starting build..."
        if [ "${{ matrix.goos }}" = "windows" ]; then
          echo "Building Windows version with UTF-8 support..."
          go build -v -ldflags="-s -w -H windowsgui -X main.Version=${{ github.ref_name }} -X main.BuildDate=${BUILD_DATE} -X main.GitCommit=${{ github.sha }}" -o ${{ matrix.asset_name }} .
        elif [ "${{ matrix.goos }}" = "linux" ]; then
          echo "Building Linux version..."
          # 检查 WebKit 是否可用
          if pkg-config --exists webkit2gtk-4.1 || pkg-config --exists webkit2gtk-4.0; then
            echo "WebKit found, proceeding with build..."
            go build -v -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=${BUILD_DATE} -X main.GitCommit=${{ github.sha }}" -o ${{ matrix.asset_name }} .
          else
            echo "WebKit not found, build may fail..."
            echo "Attempting build anyway..."
            go build -v -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=${BUILD_DATE} -X main.GitCommit=${{ github.sha }}" -o ${{ matrix.asset_name }} . || {
              echo "Build failed due to missing WebKit dependencies"
              echo "This is expected on some Ubuntu versions"
              exit 1
            }
          fi
        else
          echo "Building macOS version..."
          go build -v -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildDate=${BUILD_DATE} -X main.GitCommit=${{ github.sha }}" -o ${{ matrix.asset_name }} .
        fi

        echo "Build completed: ${{ matrix.asset_name }}"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          dir ${{ matrix.asset_name }}
        else
          ls -la ${{ matrix.asset_name }}
        fi

    - name: Create release package
      shell: bash
      run: |
        # 创建发布目录
        mkdir -p release-package

        # 复制可执行文件
        cp ${{ matrix.asset_name }} release-package/

        # 复制 web 文件夹
        cp -r web release-package/

        # 创建 README
        cat > release-package/README.md << 'EOF'
        # 剪贴板监控器

        ## 使用方法

        1. 确保 `web/` 文件夹与可执行文件在同一目录
        2. 运行可执行文件即可开始使用

        ## 文件说明

        - `${{ matrix.asset_name }}`: 主程序
        - `web/`: 界面文件（必需）
        - `README.md`: 说明文档

        ## 注意事项

        请不要删除或移动 `web/` 文件夹，程序运行需要其中的界面文件。
        EOF

        # 创建压缩包
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Windows 使用 zip
          cd release-package
          7z a -tzip ../clipboard-monitor-${{ matrix.goos }}-${{ matrix.goarch }}.zip .
          cd ..
        else
          # Unix 系统使用 tar.gz
          tar -czf clipboard-monitor-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz -C release-package .
        fi

        # 显示打包结果
        ls -la clipboard-monitor-${{ matrix.goos }}-${{ matrix.goarch }}.*

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: clipboard-monitor-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          clipboard-monitor-${{ matrix.goos }}-${{ matrix.goarch }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## 剪贴板监听器 ${{ github.ref_name }}

          ### 下载

          选择适合你操作系统的版本：

          - **Windows**: clipboard-monitor-windows-amd64.zip
          - **macOS (Intel)**: clipboard-monitor-darwin-amd64.tar.gz
          - **macOS (Apple Silicon)**: clipboard-monitor-darwin-arm64.tar.gz
          - **Linux**: clipboard-monitor-linux-amd64.tar.gz

          ### 功能特性

          - 🔍 实时监听剪贴板变化
          - 📋 保存历史记录（最近50条）
          - 🖱️ 双击复制历史内容
          - 🗑️ 清空历史记录
          - 🔄 手动刷新列表
          - 🌐 跨平台支持
          - 🎨 二次元风格界面
          - ⚡ 现代化 Web UI

          ### 使用方法

          1. 下载对应平台的压缩包
          2. 解压到任意目录
          3. 确保 `web/` 文件夹与可执行文件在同一目录
          4. 运行可执行文件即可开始使用
          5. 双击历史记录条目可复制内容

          ### 系统要求

          - Windows 10/11
          - macOS 10.14+
          - Linux (X11 桌面环境)

          ### ⚠️ 重要提示

          - 解压后请保持 `web/` 文件夹与可执行文件在同一目录
          - 不要单独移动可执行文件，需要整个文件夹一起移动
          - 首次运行可能需要允许防火墙访问
        draft: false
        prerelease: false
        files: |
          artifacts/clipboard-monitor-windows-amd64/clipboard-monitor-windows-amd64.zip
          artifacts/clipboard-monitor-darwin-amd64/clipboard-monitor-darwin-amd64.tar.gz
          artifacts/clipboard-monitor-darwin-arm64/clipboard-monitor-darwin-arm64.tar.gz
          artifacts/clipboard-monitor-linux-amd64/clipboard-monitor-linux-amd64.tar.gz


